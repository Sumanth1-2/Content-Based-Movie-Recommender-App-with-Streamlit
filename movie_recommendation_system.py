# -*- coding: utf-8 -*-
"""Movie_Recommendation_System.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vnRRrFMqWOfEwbyEQskR5Irq2uP4afsX

<center><h1>MOVIE RECOMMENDATION SYSTEM</h1></center>

### Dataset
Link: https://www.kaggle.com/datasets/tmdb/tmdb-movie-metadata
"""

import pandas as pd
import numpy as np

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import linear_kernel

import warnings
warnings.filterwarnings("ignore")

movies_data = pd.read_csv("C:/Users/CB SUMANTH/Downloads/tmdb_5000_movies.csv")
credits_data = pd.read_csv("C:/Users/CB SUMANTH/Downloads/tmdb_5000_credits.csv")

movies_data.shape

credits_data.shape

movies_data.head()

credits_data.head()

credits_data.columns = ['id','title','cast','crew']
credits_data.head()

data = movies_data.merge(credits_data, on="id")
data.head()

data["overview"].head()

"""## Building Content-Based Recommendation System"""

data["overview"].isna().sum()

# Replace NaN with an empty string
data['overview'] = data['overview'].fillna('')

# Define a TF-IDF Vectorizer Object. Remove all english stop words such as 'the', 'a'
tfidf = TfidfVectorizer(stop_words='english')

# Construct the required TF-IDF matrix by fitting and transforming the data
tfidf_matrix = tfidf.fit_transform(data['overview'])

# Output the shape of tfidf_matrix
tfidf_matrix.shape

# Compute the cosine similarity matrix
cosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)
cosine_sim.shape

cosine_sim

# Construct a reverse map of indices and movie titles
movie_indices_map = pd.Series(data.index, index=data['title_x']).drop_duplicates()
movie_indices_map

# Function that takes in movie title as input and outputs most similar movies
def get_recommendations(title, cosine_sim=cosine_sim):
    # Get the index of the movie that matches the title
    idx = movie_indices_map[title]

    # Get the pairwsie similarity scores of all movies with that movie
    sim_scores = list(enumerate(cosine_sim[idx]))

    # Sort the movies based on the similarity scores
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)

    # Get the scores of the 10 most similar movies
    sim_scores = sim_scores[1:11]

    # Get the movie indices
    movie_indices = [i[0] for i in sim_scores]

    # Return the top 10 most similar movies
    return data['title_x'].iloc[movie_indices]

get_recommendations("The Avengers")

get_recommendations("The Dark Knight Rises")

